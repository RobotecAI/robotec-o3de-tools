/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#define FORCE_OPAQUE 0

#include <scenesrg.srgi>
#include <viewsrg.srgi>
#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>
#include <Atom/Features/InstancedTransforms.azsli>
#include "AutoBrick_Common.azsli"
#include <Atom/Features/Pipeline/Forward/ForwardPassSrg.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassOutput.azsli>
#include <Atom/Features/ColorManagement/TransformColor.azsli>
#include <Atom/Features/ParallaxMapping.azsli>
#include <Atom/Features/PBR/Lighting/StandardLighting.azsli>
#include <Atom/Features/PBR/Lights/IblForward.azsli>
#include <Atom/Features/PBR/Decals.azsli>

struct VSInput
{
    float3 m_position : POSITION;
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT;
    float2 m_uv : UV0;
};

struct VSOutput
{
    precise linear centroid float4 m_position : SV_Position;
    float3 m_normal: NORMAL;
    float4 m_tangent : TANGENT;
    float3 m_worldPosition : UV0;
    float2 m_uv : UV1;
    uint m_instanceId : SV_InstanceID;
};

float4 GetWorldPositionBuffer(float3 modelPosition, float3 myWorldPos )
{
    float3 scale = float3(1.0,1.0,1.0);//float3(length(r), length(f), length(u));


    const float3 cameraPos = ViewSrg::m_worldPosition;
    float3 cameraPos2 = float3(cameraPos.x,cameraPos.y,myWorldPos.z);
    float3 myForward = normalize(cameraPos2 - myWorldPos);
    float3 myRight = cross(float3(0, 0, -1), myForward); // Cross product of up and forward vectors
    float3 myUp = float3(0, 0, 1);

    myRight *= scale.x;
    myUp *= scale.y;
    const row_major float4x4 tm = {
        myRight.x, myForward.x, myUp.x, myWorldPos.x,
        myRight.y, myForward.y, myUp.y, myWorldPos.y,
        myRight.z, myForward.z, myUp.z, myWorldPos.z,
                0,           0,      0,            1.0,
    };
    return mul(tm, float4(modelPosition, 1));

}

float3 GetVertexModelPosition(float2 m_uv)
{
    float3 vertexModelPosition = float3(m_uv.x-0.5, 0, m_uv.y-0.5);
    return vertexModelPosition; 
}

VSOutput AutoBrick_ForwardPassVS(VSInput IN, uint instanceId : SV_InstanceID)
{
    VSOutput OUT;
 
    float3 worldPosition = mul(GetObjectToWorldMatrix(instanceId), float4(IN.m_position, 1.0)).xyz;
    worldPosition = GetObjectToWorldMatrix(instanceId)._m03_m13_m23;
    const uint vertexIndex = uint(instanceId) % uint(6);
    const float heightToWidthRatio = 1.0; // float(texDims.y) / float(texDims.x);
    const float3 vertexModelPosition = GetVertexModelPosition(IN.m_uv);
    const float4 vertexWorldPosition = GetWorldPositionBuffer(vertexModelPosition,worldPosition);
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, vertexWorldPosition);
    //OUT.m_texCoord = GetVertexTextureCoord(vertexIndex);


    OUT.m_uv = float2(IN.m_uv.x, 1.0 - IN.m_uv.y);
    //OUT.m_uv = IN.m_uv;

    OUT.m_worldPosition = worldPosition;
    //OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(OUT.m_worldPosition, 1.0));
    OUT.m_normal = IN.m_normal;
    OUT.m_tangent = IN.m_tangent;
    OUT.m_instanceId = instanceId;
    return OUT;
}
DepthResult GetDepth(float2 uv, float2 uv_ddx, float2 uv_ddy)
{
    float depth;
    return DepthResultNormalized(1.0);
}

ForwardPassOutput AutoBrick_ForwardPassPS(VSOutput IN)
{
    
    real4x4 objectToWorld = real4x4(GetObjectToWorldMatrix(IN.m_instanceId));
    real3x3 objectToWorldIT = real3x3(GetObjectToWorldMatrixInverseTranspose(IN.m_instanceId));

    float3 normalWS, tangentWS, bitangentWS;
    ConstructTBN(real3(IN.m_normal), real4(IN.m_tangent), objectToWorld, objectToWorldIT, normalWS, tangentWS, bitangentWS);

    float3x3 identityUvMatrix = 
        { 1,0,0,
          0,1,0,
          0,0,1 };
          
    float depthOffset = 0.0;

    ParallaxOffset tangentOffset = GetParallaxOffset( AutoBrickSrg::m_lineDepth,
                                                      depthOffset,
                                                      IN.m_uv,
                                                      ViewSrg::m_worldPosition.xyz - IN.m_worldPosition, 
                                                      tangentWS,
                                                      bitangentWS,
                                                      normalWS,
                                                      identityUvMatrix);
    
    IN.m_uv += tangentOffset.m_offsetTS.xy;
 
    float4 image_sample = AutoBrickSrg::m_image.Sample(AutoBrickSrg::m_sampler, IN.m_uv);
    if (image_sample.a < 0.5)
    {
        discard;
    }
    float3 baseColor = image_sample.rgb;
    //float surfaceDepth = 0.5;
    float3 surfaceNormal = normalize(float3(0, 1, 0));
    // GetSurfaceShape(IN.m_uv, surfaceDepth, surfaceNormal);
    const float3 surfaceNormalWorld = TangentSpaceToWorld(surfaceNormal, normalWS, tangentWS, bitangentWS);
    
    // ------- Surface -------

    Surface surface;
    
    // Position, Normal, Roughness
    surface.position = IN.m_worldPosition.xyz;
    surface.normal = normalize(surfaceNormalWorld);
    surface.vertexNormal = surfaceNormal;
    surface.roughnessLinear = 1.0f;
    surface.CalculateRoughnessA();

    // Albedo, SpecularF0
    const float metallic = 0.0f;
    const float specularF0Factor = 0.0f;
    surface.SetAlbedoAndSpecularF0(baseColor, specularF0Factor, metallic);

    // Clear Coat
    surface.clearCoat.InitializeToZero();

    // ------- LightingData -------

    LightingData lightingData;

    // Light iterator
    lightingData.tileIterator.Init(IN.m_position, PassSrg::m_lightListRemapped, PassSrg::m_tileLightData);
    // (real3 positionWS, real3 normal, real roughnessLinear)
    lightingData.Init(ViewSrg::m_worldPosition.xyz, surface.normal, surface.roughnessLinear, ViewSrg::m_worldPosition.xyz);

    // Shadow
    lightingData.diffuseAmbientOcclusion = 1.0f - AutoBrickSrg::m_aoFactor;

    // Diffuse and Specular response
    lightingData.specularResponse = FresnelSchlickWithRoughness(lightingData.NdotV, surface.specularF0, surface.roughnessLinear);
    lightingData.diffuseResponse = 1.0f - lightingData.specularResponse;

    const float alpha = 1.0f;

    // ------- Lighting Calculation -------

    // Apply Decals
    ApplyDecals(lightingData.tileIterator, surface);

    // Apply Direct Lighting
    ApplyDirectLighting(surface, lightingData, IN.m_position);

    // Apply Image Based Lighting (IBL)
    ApplyIblForward(surface, lightingData);

    // Finalize Lighting
    lightingData.FinalizeLighting();

    PbrLightingOutput lightingOutput = GetPbrLightingOutput(surface, lightingData, alpha);

    // ------- Output -------

    ForwardPassOutput OUT;

    OUT.m_diffuseColor = lightingOutput.m_diffuseColor;
    OUT.m_diffuseColor.w = -1; // Subsurface scattering is disabled
    //image_sample;//
    OUT.m_specularColor =  lightingOutput.m_specularColor;
    OUT.m_specularColor =  image_sample;
    OUT.m_specularF0 = lightingOutput.m_specularF0;
    //OUT.m_specularF0 = image_sample;
    OUT.m_albedo = lightingOutput.m_albedo;
    OUT.m_normal = lightingOutput.m_normal;

    return OUT;
}

